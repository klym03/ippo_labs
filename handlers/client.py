from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup , State
from database import postgres_db
from create_bot import bot
import keyboards.client_kb as kb
from create_bot import main_admin


class FSMClient(StatesGroup):
    client_id = State()
    pdf_file = State()
    variant = State()
    group = State()



async def start_command(message: types.Message):
    await start_menu(message)


async def start_menu(message: types.Message):
    user_id = message.chat.id
    user= await postgres_db.get_user(user_id)
    if user_id>0:
        if user is None:
            await postgres_db.add_user(user_id)
        with open('images/mainBanner.jpg', 'rb') as photo:
            await bot.send_photo(message.chat.id, photo,
                                 caption='–í—ñ—Ç–∞—î–º–æ! üëãüèΩ\n–¶–µ —Å–µ—Ä–≤—ñ—Å –¥–æ–ø–æ–º–æ–≥–∏ –∑ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∏–º–∏ —Ä–æ–±–æ—Ç–∞–º–∏!'
                                         '\n\n–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:', reply_markup=kb.ikb_client_main_menu())

async def main_menu(call:types.CallbackQuery):
    await call.message.delete()
    await start_menu(call.message)
async def info(call: types.CallbackQuery):
    await call.message.delete()
    await bot.send_message(call.message.chat.id,text='–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–µ—Ä–≤—ñ—Å:\n\n'
                           '–¶–µ–π —Å–µ—Ä–≤—ñ—Å –¥–æ–ø–æ–º–æ–∂–µ –≤–∞–º –∑ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∏–º–∏ —Ä–æ–±–æ—Ç–∞–º–∏.\n'
                           '–í–∏ –Ω–∞–¥–∞—î—Ç–µ —Ñ–∞–π–ª –∑ –≤–∞—à–æ—é –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ—é, –≤–∞—à –≤–∞—Ä—ñ–∞–Ω—Ç —Ç–∞ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–∏ –≤ —è–∫—ñ–π –≤–∏ –Ω–∞–≤—á–∞—î—Ç–µ—Å—å.\n'
                           '–í–∞—Ä—Ç—ñ—Å—Ç—å –æ–¥–Ω—ñ—î—ñ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ—ó —Ä–æ–±–æ—Ç–∏ - 120-200 –≥—Ä–Ω.\n'
                           '–ü—ñ—Å–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª—É –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ –Ω–∞ —è–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–¥—ñ–π—Å–Ω–∏—Ç–∏ –æ–ø–ª–∞—Ç—É.\n'
                           '–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –≥–æ—Ç–æ–≤—É –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—É —Ä–æ–±–æ—Ç—É.\n'
                           '–¢–µ—Ä–º—ñ–Ω –≤–∏–∫–æ–Ω–∞–Ω–Ω—è - —è–∫—â–æ –≤–∏ –ø–æ–¥–∞–ª–∏ –¥–æ 13:00, —Ç–æ–¥—ñ –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –≥–æ—Ç–æ–≤—É –¥–æ 00:00 —Ü—å–æ–≥–æ –¥–Ω—è, —è–∫—â–æ –ø—ñ—Å–ª—è, —Ç–æ–¥—ñ –¥–æ 12:00 –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –¥–Ω—è.\n'
                           ,reply_markup=kb.ikb_client_back_to_main_menu())

async def order(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    await FSMClient.pdf_file.set()
    await bot.send_message(call.message.chat.id, '–í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ñ–∞–π–ª –∑ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ—é —Ä–æ–±–æ—Ç–æ—é üëáüèº',
                           reply_markup=kb.ikb_client_back_to_main_menu())
    await state.update_data(client_id=call.message.chat.id)

async def pdf_file(message: types.Message, state: FSMContext):
    if not message.document:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç —É —Ñ–æ—Ä–º–∞—Ç—ñ PDF. üëáüèº")
        return
    async with state.proxy() as data:
        data['pdf_file'] = message.document.file_id
    await FSMClient.variant.set()  # –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
    await message.answer('–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –≤–∞—Ä—ñ–∞–Ω—Ç üëáüèº')

async def variant(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['variant'] = message.text
    await FSMClient.group.set()  # –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
    await message.answer('–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –≥—Ä—É–ø–∏ üëáüèº')

async def group(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['group'] = message.text
    data = await state.get_data()
    await postgres_db.add_order(data['pdf_file'], data['variant'], data['group'], message.chat.id)
    username = message.from_user.username
    if username:
        await bot.send_message(message.chat.id, '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–π–Ω—è—Ç–∞, –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤ º—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º',
                           reply_markup=kb.ikb_client_back_to_main_menu())
    else:
        await bot.send_message(message.chat.id, '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–π–Ω—è—Ç–∞, –æ—Å–∫—ñ–ª—å–∫–∏ —É –≤–∞—Å –Ω–µ–º–∞—î —é–∑–µ—Ä–Ω–µ–π–º—É, –Ω–∞–ø–∏—à—ñ—Ç—å –±—É–¥—å –ª–∞—Å–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É: @ippo_labs ',
                               reply_markup=kb.ikb_client_back_to_main_menu())
    await bot.send_message(main_admin, f'–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—É —Ä–æ–±–æ—Ç—É\n'
                                       f'–í–∞—Ä—ñ–∞–Ω—Ç: {data["variant"]}\n'
                                       f'–ì—Ä—É–ø–∞: {data["group"]}\n'
                                       f'–í—ñ–¥ {message.chat.id}\n'
                                       f'–Æ–∑–µ—Ä–Ω–µ–π–º: @{message.from_user.username if message.from_user.username else "–Ω–µ–º–∞—î —é–∑–µ—Ä–Ω–µ–π–º—É"}')
    await bot.send_document(main_admin, data['pdf_file'])
    await state.finish()
async def orders_list(call: types.CallbackQuery):
    orders = await postgres_db.get_order(call.message.chat.id)
    if orders is None:
        await call.message.answer('–í–∏ —â–µ –Ω–µ –∑–∞–º–æ–≤–ª—è–ª–∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ñ —Ä–æ–±–æ—Ç–∏')
    else:
        await call.message.answer(f'–í–∞—à–∞ –∑–∞—è–≤–∫–∞:\n'
                                  f'–í–∞—Ä—ñ–∞–Ω—Ç: {orders["variant"]}\n'
                                  f'–ì—Ä—É–ø–∞: {orders["student_group"]}\n'
                                  f'–°—Ç–∞—Ç—É—Å: {orders["status"]}\n'
                                  f'–¶—ñ–Ω–∞: {orders["price"]}\n'
                                  f'–î–∞—Ç–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {orders["date"]}')







def register_handlers_client(dp: Dispatcher):
    # –†–µ—î—Å—Ç—Ä—É—î–º–æ —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è /start –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –Ω–∞ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
    dp.register_message_handler(start_command, commands=['start'], state=None)

    dp.register_callback_query_handler(main_menu, text='main_menu', state="*")  # –î–æ–∑–≤–æ–ª—è—î–º–æ –æ–±—Ä–æ–±–∫—É –≤ –±—É–¥—å-—è–∫–æ–º—É —Å—Ç–∞–Ω—ñ
    dp.register_callback_query_handler(info, text='info', state="*")
    dp.register_callback_query_handler(order, text='order', state="*")
    dp.register_message_handler(pdf_file, content_types=types.ContentType.DOCUMENT, state=FSMClient.pdf_file)
    dp.register_message_handler(variant, state=FSMClient.variant)
    dp.register_message_handler(group, state=FSMClient.group)





